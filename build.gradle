/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.0.1/userguide/tutorial_java_projects.html
 */
buildscript {
	apply from: "$serviceBuildUrl/cocktail.buildscript.gradle?private_token=${gitlabToken}"
    ext { 
    	springBootVersion = '1.5.4.RELEASE'
    	aptPluginVersion = '0.10'
    	shadowVersion = '2.0.1'
		kotlinVersion = '1.1.3-2'
	}
    repositories { 
    	mavenCentral()
    	maven {
	      url "https://plugins.gradle.org/m2/"
	    }
	}
    dependencies { 
    	classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    	classpath "net.ltgt.gradle:gradle-apt-plugin:${aptPluginVersion}"
    	classpath "com.github.jengelman.gradle.plugins:shadow:${shadowVersion}"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
		classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
		classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
	}
}

allprojects {

    apply plugin: 'java-library'
    apply plugin: "kotlin"
	apply plugin: 'kotlin-spring'
	apply plugin: 'kotlin-jpa'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'net.ltgt.apt'
	apply plugin: "kotlin"
	apply plugin: 'kotlin-spring'
	apply plugin: 'kotlin-jpa'

    repositories {
       mavenCentral()
       mavenLocal()
       maven {
        	credentials {
            	username nexusDevUserName
            	password nexusDevPassword
        	}
            url "http://nexus.intra-cocktail.org/content/groups/public/"
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
		compile "org.jetbrains.kotlin:kotlin-stdlib-jre8"
		compile "org.jetbrains.kotlin:kotlin-reflect"

        testCompile 'junit:junit:4.12'
		testCompile "org.jetbrains.kotlin:kotlin-test"
		testCompile "org.jetbrains.kotlin:kotlin-test-junit"
    }
}

configure(subprojects.findAll { it.name.contains('api') }) {

	dependencies {
		compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
		compile 'io.github.openfeign:feign-core:9.0.0'
		compileOnly project(':common:common-configuration-internal')
		compile 'io.github.openfeign:feign-jaxrs:9.0.0'
		compile 'io.github.openfeign:feign-slf4j:9.0.0'
		compile 'io.github.openfeign:feign-gson:9.0.0'
	}
}

configure(subprojects.findAll { it.name.contains('implementation') }) {

    apply plugin: "io.spring.dependency-management"

    ext { springBootVersion = '1.5.4.RELEASE' }

    dependencies {
    	compile "org.jetbrains.kotlin:kotlin-stdlib-jre8"
        compile 'org.springframework.boot:spring-boot-starter'
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-jersey'
        compile 'org.springframework.boot:spring-boot-starter-jdbc'
        compile 'org.springframework.boot:spring-boot-starter-data-jpa'
        compile 'javax.inject:javax.inject:1'
        compile 'com.querydsl:querydsl-sql:4.1.3'
		compile 'org.mapstruct:mapstruct-jdk8:1.2.0.CR1'
	    apt 'org.mapstruct:mapstruct-processor:1.2.0.CR1'
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }
}

configure(subprojects.findAll { it.path.contains('search') }) {
	configurations { drivers }
	
	sourceSets {
		generated {
			java
		}
	}
	
	dependencies {
    	drivers 'com.oracle:ojdbc6:11.2.0.3'
    	drivers 'com.oracle:xdb6:11.2.0.4'
    }

	task rmQ(type: Delete) {
	    delete fileTree(dir: "src/main/java/org/cocktail/gfc/support/querydsl4", include: "Q*")
	}

	if (project.hasProperty('queryDSLDbUrl')) {
	    task genQueryDsl(type: org.cocktail.gradle.plugins.cocktailplugin.GenerateQueryDsl4Source, dependsOn: 'rmQ') {
	        dbUrl = queryDSLDbUrl
	        dbUserName = queryDSLDbUser
	        dbPassword = queryDSLDbPassword
	        jsonConfigurationFile = "${project.projectDir.absolutePath}/database.json"
	        jsonCustomTypeMappingFile = "${project.projectDir.absolutePath}/typeMapping.json"
	        targetPackage = "org.cocktail.gfc.${project.parent.name.replace('-', '.')}.querydsl4"
	        targetSourceFolder = "${project.projectDir.absolutePath}/src/generated/java/"
	        schemaToPackage = false
	        generateQIds = false
	    }
	}
}

project(':app-spring') {
	//apply plugin: 'application'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'com.github.johnrengelman.shadow'
	
	jar {
		baseName = 'gfc-services'
		version = '1.0.0'
	}

	// TODO : discuter de ces dependances
	dependencies {
		compile( project( ':compta-budgetaire:api' ) )
		compile( project( ':compta-budgetaire:implementation' ) )
		compile( project( ':compta-generale:api' ) )
		compile( project( ':compta-generale:implementation' ) )
		compile( project( ':depense:api' ) )
		compile( project( ':depense:implementation' ) )
	
	    compile('org.springframework.boot:spring-boot-starter-actuator')
	    compile('org.springframework.boot:spring-boot-starter-web')
	    
	    compile 'commons-codec:commons-codec:1.10'
	    compile 'com.oracle:ojdbc6:11.2.0.3'
	    compile 'com.zaxxer:HikariCP:2.6.1'
	    
	    testCompile('org.springframework.boot:spring-boot-starter-test')
    }
}

project(':app-wo') {
	group = "cocktail.application"
    project.ext.artifact = 'gfc-services-app-wo'
    project.ext.year = '2017'

	apply plugin: 'org.springframework.boot'
    apply plugin: 'maven'
	apply plugin: 'cocktail'
	apply from: "$serviceBuildUrl/cocktail.gradle?private_token=${gitlabToken}"
	apply from: "$serviceBuildUrl/cocktail-application.main.gradle?private_token=${gitlabToken}"
	apply from: "$serviceBuildUrl/libraries.gradle?private_token=${gitlabToken}"
	apply from: "$serviceBuildUrl/libraries-wo-543.gradle?private_token=${gitlabToken}"
	apply from: "$serviceBuildUrl/libraries-wonder-550.gradle?private_token=${gitlabToken}"
    
	sourceSets {
	    main {
	        java { srcDir 'Sources' }
	        resources { srcDir 'Resources' }
	    }
	}
	
	compileJava {
	    generatedSourcesDestinationDir = '.apt_generated'
		source += fileTree(dir: rootDir).matching { include '**/port/adapter/rest/*Resource.java' }
	}
	
	dependencies {
	    apt "cocktail.libs:generateur-controleur-wo-compile:0.1.0"
	
		compile( project( ':compta-budgetaire:api' ) )
		compile( project( ':compta-budgetaire:implementation' ) )
		compile( project( ':compta-generale:api' ) )
		compile( project( ':compta-generale:implementation' ) )
		compile( project( ':depense:api' ) )
		compile( project( ':depense:implementation' ) )
		
	    compile('org.springframework.boot:spring-boot-starter-web')
	    compile "cocktail.libs:generateur-controleur-wo-runtime:0.1.0"
	    compile "cocktail.fwk:FwkCktlRestServices:$fwkVersion"
	    compile "com.oracle:ojdbc6:11.2.0.3"
	    compile "org.reflections:reflections:0.9.9"
	}
}

project(':compta-budgetaire:implementation') {
	dependencies {
		api( project( ':compta-budgetaire:api' ) )
	}
}

project(':compta-generale:implementation') {
	dependencies {
		api( project( ':compta-budgetaire:api' ) )
		api( project( ':compta-generale:api' ) )
	}
}

project(':depense:implementation') {
	dependencies {
		api( project( ':depense:api' ) )
	}
}

project(':depense-search:implementation') {
	dependencies {
		api( project( ':depense-search:api' ) )
	}
}
