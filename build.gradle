/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.0.1/userguide/tutorial_java_projects.html
 */
buildscript {
	apply from: "$serviceBuildUrl/cocktail.buildscript.gradle?private_token=${gitlabToken}"

    ext {
    	aptPluginVersion = '0.10'
		kotlinVersion = '1.1.51'
        springBootVersion = '2.0.0.BUILD-SNAPSHOT'
	}
    repositories { 
    	mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    	maven { url "https://plugins.gradle.org/m2/" }
	}
    dependencies { 
    	classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    	classpath "net.ltgt.gradle:gradle-apt-plugin:${aptPluginVersion}"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
		classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
		classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
		classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
	}
}

apply plugin: 'cocktail'

ext.generateJarFwks = false

subprojects { subproject ->

	apply plugin: 'java' // java-library
    apply plugin: 'kotlin'
	apply plugin: 'kotlin-spring'
	apply plugin: 'kotlin-jpa'
    apply plugin: 'idea'
    apply plugin: 'net.ltgt.apt'
	apply plugin: 'checkstyle'

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        mavenLocal()
        maven {
        	credentials {
            	username nexusDevUserName
            	password nexusDevPassword
        	}
            url "http://nexus.intra-cocktail.org/content/groups/public/"
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

	tasks.withType(Jar) {
		baseName = "datalogger-$project.displayName"
	}

//	configurations {
//		jar.archiveName = "${subproject.path}.jar"
//	}

	configurations { drivers }

    sourceSets {
        main.kotlin.srcDirs += 'src/main/java'
    }

	checkstyle {
		toolVersion '8.1'
		configFile = rootProject.file("config/checkstyle/checkstyle.xml")
	}

	dependencies {
		compile "org.jetbrains.kotlin:kotlin-stdlib-jre8"
		compile "org.jetbrains.kotlin:kotlin-reflect"

        testCompile 'junit:junit:4.12'
		testCompile "org.jetbrains.kotlin:kotlin-test"
		testCompile "org.jetbrains.kotlin:kotlin-test-junit"

		checkstyle "com.github.sevntu-checkstyle:sevntu-checks:1.24.2"
	}
}

configure(subprojects.findAll { it.name.contains('api') }) {

	dependencies {
		compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
		compile 'io.github.openfeign:feign-core:9.0.0'
		compile 'io.github.openfeign:feign-jaxrs:9.0.0'
		compile 'io.github.openfeign:feign-slf4j:9.0.0'
		compile 'io.github.openfeign:feign-gson:9.0.0'
		compileOnly project(':common:common-configuration-internal')
	}
}

configure(subprojects.findAll { it.name.contains('implementation') }) {

	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	jar.enabled = true
	bootJar.enabled = false

    dependencies {
		compile( project( ':common:common-persistence' ) )

    	compile "org.jetbrains.kotlin:kotlin-stdlib-jre8"
        compile 'org.springframework.boot:spring-boot-starter'
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-jersey'
        compile 'org.springframework.boot:spring-boot-starter-jdbc'
        compile 'org.springframework.boot:spring-boot-starter-data-jpa'
        compile 'javax.inject:javax.inject:1'
		// pour les projets JPA
		compile 'au.com.console:kotlin-jpa-specification-dsl:0.1.0'
		// pour les projets search seulement
		compile 'com.querydsl:querydsl-sql:4.1.4'
		compile 'org.mapstruct:mapstruct-jdk8:1.2.0.CR1'
	    apt 'org.mapstruct:mapstruct-processor:1.2.0.CR1'
    }
}

configure(subprojects.findAll { it.path.contains('search') }) {

	dependencies {
    	drivers 'com.oracle:ojdbc6:11.2.0.3'
    	drivers 'com.oracle:xdb6:11.2.0.4'
    }

	task rmQ(type: Delete) {
		delete fileTree("build/generated/source/apt/main").include("**/Q*")
	}

	if (project.hasProperty('queryDSLDbUrl')) {
	    task genQueryDsl(type: org.cocktail.gradle.plugins.cocktailplugin.GenerateQueryDsl4Source, dependsOn: 'rmQ') {
	        dbUrl = queryDSLDbUrl
	        dbUserName = queryDSLDbUser
	        dbPassword = queryDSLDbPassword
	        jsonConfigurationFile = "${project.projectDir.absolutePath}/database.json"
	        jsonCustomTypeMappingFile = "${project.projectDir.absolutePath}/typeMapping.json"
	        targetPackage = "org.cocktail.gfc.${project.parent.name.replace('-', '.')}.querydsl4"
			targetSourceFolder = "${project.projectDir.absolutePath}/build/generated/source/apt/main/"
			schemaToPackage = false
	        generateQIds = false
	    }
	}
}

project(':app-spring') {

	apply plugin: 'war'
	apply plugin: 'maven'
	apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
	apply plugin: "com.gorylenko.gradle-git-properties"

	def artifactVersion = project.property('version')

	bootWar {
		baseName = 'gfc-services'
		manifest {
			attributes('Version': "${artifactVersion}")
		}
	}

	// TODO : discuter de ces dependances
	dependencies {
		compile( project( ':compta-budgetaire:api' ) )
		compile( project( ':compta-budgetaire:implementation' ) )
		compile( project( ':compta-generale:api' ) )
		compile( project( ':compta-generale:implementation' ) )
		compile( project( ':depense:comptabilite:api' ) )
		compile( project( ':depense:comptabilite:implementation' ) )
		compile( project( ':depense:core:api' ) )
		compile( project( ':depense:core:implementation' ) )
		compile( project( ':depense:financement:api' ) )
		compile( project( ':depense:financement:implementation' ) )
		compile( project( ':depense:search:api' ) )
		compile( project( ':depense:search:implementation' ) )

        compile('org.springframework.boot:spring-boot-starter')
	    
	    compile 'commons-codec:commons-codec:1.10'
	    compile 'com.oracle:ojdbc6:11.2.0.3'
	    compile 'com.zaxxer:HikariCP:2.6.1'

		providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	    testCompile('org.springframework.boot:spring-boot-starter-test')
    }

	uploadArchives {
		repositories.mavenDeployer {
			repository(url: "http://nexus.intra-cocktail.org/content/repositories/cocktail/") {
				authentication(userName: nexusUserName, password: nexusPassword)
			}
			pom.version = artifactVersion
			pom.groupId = 'cocktail.application'
			pom.artifactId = 'gfc-services'
		}
	}
}

project(':common:common-bean') {
	dependencies {
		compile 'org.apache.commons:commons-lang3:3.6'
		compile 'org.apache.commons:commons-math3:3.6.1'
	}
}

project(':common:common-persistence') {
	dependencies {
		compile project(':common:common-bean')
		compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
	}
}

project(':compta-budgetaire:implementation') {
	dependencies {
		compile( project( ':compta-budgetaire:api' ) )
	}
}

project(':compta-generale:implementation') {
	dependencies {
		compile( project( ':compta-budgetaire:api' ) )
		compile( project( ':compta-generale:api' ) )
	}
}

project(':depense:comptabilite:implementation') {
	dependencies {
        compile( project( ':compta-generale:api' ) )
        compile( project( ':depense:comptabilite:api' ) )
		compile( project( ':depense:core:api' ) )
	}
}

project(':depense:core:implementation') {
	dependencies {
		compile( project( ':depense:core:api' ) )
	}
}

project(':depense:financement:implementation') {
	dependencies {
		compile( project( ':depense:financement:api' ) )
	}
}

project(':depense:search:implementation') {
	dependencies {
		compile( project( ':depense:search:api' ) )
	}
}

// Tâche gradle factice qui permet de ne pas faire échouer la chaine d'intégration continue
// Jenkins délenche pour chaque job l'appel a build packagewoapplication uploadArchives
task packagewoapplication